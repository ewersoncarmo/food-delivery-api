# Server
server.servlet.context-path=/food-delivery-api
# Configuration to use spring framework support to handle with headers forward. Ex: http / https protocol
server.forward-headers-strategy=framework

# Database
spring.datasource.url=jdbc:mysql://${DB_HOST:localhost}/fooddeliveryapi?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect

spring.datasource.hikari.minimum-idle=3
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.idle-timeout=1000

#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create

#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql

# Security
# Configuration to use with opaque tokens
#spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://localhost:8080/food-delivery-api/oauth/check_token
#spring.security.oauth2.resourceserver.opaquetoken.client-id={client_id used to check tokens}
#spring.security.oauth2.resourceserver.opaquetoken.client-secret={client_secret used to check tokens}

# Configuration to use with asymmetric key
#spring.security.oauth2.resourceserver.jwt.public-key-location=classpath:keys/fooddeliveyapi-public-key.pem
#auth.jwt.keystore.jks-location=classpath:keys/fooddeliveyapi.jks

spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/food-delivery-api/.well-known/jwks.json

# Properties
# activates compression for responses using Gzip
server.compression.enabled=true

spring.jackson.deserialization.fail-on-unknown-properties=true

#spring.jackson.deserialization.fail-on-ignored-properties=true

spring.mvc.throw-exception-if-no-handler-found=true
spring.resources.add-mappings=false

spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

api.storage.type=${API_STORAGE_TYPE}
api.mail.type=${API_EMAIL_TYPE}